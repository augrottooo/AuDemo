{"ast":null,"code":"import axios from './axios/index';\n\n// 定义组件选项对象\nconst options = {\n  // 组件数据\n  data() {\n    return {\n      showLogin: true,\n      // 控制显示登录还是注册表单，默认显示登录\n      loginUsername: \"\",\n      loginPassword: \"\",\n      registerUsername: \"\",\n      registerPhone: \"\",\n      registerPassword: \"\",\n      registerConfirmPassword: \"\"\n    };\n  },\n  // 组件方法\n  methods: {\n    // 处理登录逻辑\n    async handleLogin() {\n      // 检查邮箱和密码是否都已填写\n      if (this.loginUsername && this.loginPassword) {\n        try {\n          const response = await axios.post('/api/login', {\n            username: this.loginUsername,\n            password: this.loginPassword\n          });\n          if (response.data.success) {\n            alert(\"登录成功！\");\n          } else {\n            alert(response.data.message);\n          }\n        } catch (error) {\n          alert(\"登录失败，请稍后重试！\");\n        }\n      } else {\n        alert(\"请填写所有必填项！\");\n      }\n    },\n    // 处理注册逻辑\n    async handleRegister() {\n      // 检查所有必填项是否都已填写\n      if (this.registerUsername && this.registerPhone && this.registerPassword && this.registerConfirmPassword) {\n        // 检查两次输入的密码是否一致\n        if (this.registerPassword !== this.registerConfirmPassword) {\n          alert(\"两次输入的密码不一致！\");\n        } else {\n          try {\n            const response = await axios.post('/api/register', {\n              username: this.registerUsername,\n              phone: this.registerPhone,\n              password: this.registerPassword\n            });\n            if (response.data.success) {\n              alert(\"注册成功！\");\n            } else {\n              alert(response.data.message);\n            }\n          } catch (error) {\n            alert(\"注册失败，请稍后重试！\");\n          }\n        }\n      } else {\n        alert(\"请填写所有必填项！\");\n      }\n    },\n    sendrequst() {\n      axios.get('/api/students');\n    }\n  }\n};\n// 导出组件选项\nexport default options;","map":{"version":3,"names":["axios","options","data","showLogin","loginUsername","loginPassword","registerUsername","registerPhone","registerPassword","registerConfirmPassword","methods","handleLogin","response","post","username","password","success","alert","message","error","handleRegister","phone","sendrequst","get"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <!-- 根容器 -->\n  <div id=\"app\">\n    <div class=\"all-form\">\n      <!-- 登录/注册选择区域 -->\n      <div class=\"select-buttons\">\n        <!-- 登录按钮，点击时设置 showLogin 为 true，并根据 showLogin 状态添加 active 类 -->\n        <button v-on:click=\"showLogin = true\" :class=\"{ active: showLogin }\">登录</button>\n        <!-- 注册按钮，点击时设置 showLogin 为 false，并根据 showLogin 状态添加 active 类 -->\n        <button @click=\"showLogin = false\" :class=\"{ active: !showLogin }\">注册</button>\n      </div>\n\n      <!-- 登录表单，当 showLogin 为 true 时显示 -->\n      <form v-if=\"showLogin\" @submit.prevent=\"handleLogin\">\n        <h1>登录</h1>\n        <!-- 邮箱输入框 -->\n        <div class=\"form-group\">\n          <label for=\"\">用户名(学生为学号，管理员为姓名)<br /></label>\n          <!-- 双向绑定到 loginEmail 数据 -->\n          <input type=\"text\" v-model=\"loginUsername\" />\n        </div>\n        <!-- 密码输入框 -->\n        <div class=\"form-group\">\n          <label for=\"\">密码<br /></label>\n          <!-- 双向绑定到 loginPassword 数据 -->\n          <input type=\"password\" v-model=\"loginPassword\" />\n        </div>\n        <!-- 登录提交按钮，点击时触发 handleLogin 方法 -->\n        <input type=\"submit\" value=\"确定\" v-on:click=\"handleLogin\" />\n      </form>\n\n      <!-- 注册表单，当 showLogin 为 false 时显示 -->\n      <form v-else @submit.prevent=\"handleRegister\">\n        <h1>注册</h1>\n        <!-- 角色输入框 -->\n        <div class=\"form-group\">\n          <label for=\"\">角色(输入 1 代表学生,2 代表管理员)<br /></label>\n          <!-- 双向绑定到 registerEmail 数据 -->\n          <input type=\"text\" v-model=\"registerUsername\" />\n        </div>\n        <!-- 用户名输入框 -->\n        <div class=\"form-group\">\n          <label for=\"\">用户名(学生为学号，管理员为姓名)<br /></label>\n          <!-- 双向绑定到 registerEmail 数据 -->\n          <input type=\"text\" v-model=\"registerUsername\" />\n        </div>\n        <!-- 手机号输入框 -->\n        <div class=\"form-group\">\n          <label for=\"\">手机号<br /></label>\n          <!-- 双向绑定到 registerPhone 数据 -->\n          <input type=\"text\" v-model=\"registerPhone\" />\n        </div>\n        <!-- 密码输入框 -->\n        <div class=\"form-group\">\n          <label for=\"\">密码<br /></label>\n          <!-- 双向绑定到 registerPassword 数据 -->\n          <input type=\"password\" v-model=\"registerPassword\" />\n        </div>\n        <!-- 确认密码输入框 -->\n        <div class=\"form-group\">\n          <label for=\"\">确认密码<br /></label>\n          <!-- 双向绑定到 registerConfirmPassword 数据 -->\n          <input type=\"password\" v-model=\"registerConfirmPassword\" />\n        </div>\n        <!-- 注册提交按钮，点击时触发 handleRegister 方法 -->\n        <input type=\"submit\" value=\"确定\" v-on:click=\"handleRegister\" />\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from './axios/index';\n\n// 定义组件选项对象\nconst options = {\n  // 组件数据\n  data() {\n    return {\n      showLogin: true, // 控制显示登录还是注册表单，默认显示登录\n      loginUsername: \"\",\n      loginPassword: \"\",\n      registerUsername: \"\",\n      registerPhone: \"\",\n      registerPassword: \"\",\n      registerConfirmPassword: \"\",\n    };\n  },\n\n  // 组件方法\n  methods: {\n    // 处理登录逻辑\n    async handleLogin() {\n      // 检查邮箱和密码是否都已填写\n      if (this.loginUsername && this.loginPassword) {\n        try {\n          const response = await axios.post('/api/login', {\n            username: this.loginUsername,\n            password: this.loginPassword\n          });\n          if (response.data.success) {\n            alert(\"登录成功！\");\n          } else {\n            alert(response.data.message);\n          }\n        } catch (error) {\n          alert(\"登录失败，请稍后重试！\");\n        }\n      } else {\n        alert(\"请填写所有必填项！\");\n      }\n    },\n\n    // 处理注册逻辑\n    async handleRegister() {\n      // 检查所有必填项是否都已填写\n      if (\n        this.registerUsername &&\n        this.registerPhone &&\n        this.registerPassword &&\n        this.registerConfirmPassword\n      ) {\n        // 检查两次输入的密码是否一致\n        if (this.registerPassword !== this.registerConfirmPassword) {\n          alert(\"两次输入的密码不一致！\");\n        } else {\n          try {\n            const response = await axios.post('/api/register', {\n              username: this.registerUsername,\n              phone: this.registerPhone,\n              password: this.registerPassword\n            });\n            if (response.data.success) {\n              alert(\"注册成功！\");\n            } else {\n              alert(response.data.message);\n            }\n          } catch (error) {\n            alert(\"注册失败，请稍后重试！\");\n          }\n        }\n      } else {\n        alert(\"请填写所有必填项！\");\n      }\n    },\n\n    sendrequst(){\n      axios.get('/api/students')\n    }\n  },\n};\n// 导出组件选项\nexport default options;\n</script>"],"mappings":"AAwEA,OAAAA,KAAA;;AAEA;AACA,MAAAC,OAAA;EACA;EACAC,KAAA;IACA;MACAC,SAAA;MAAA;MACAC,aAAA;MACAC,aAAA;MACAC,gBAAA;MACAC,aAAA;MACAC,gBAAA;MACAC,uBAAA;IACA;EACA;EAEA;EACAC,OAAA;IACA;IACA,MAAAC,YAAA;MACA;MACA,SAAAP,aAAA,SAAAC,aAAA;QACA;UACA,MAAAO,QAAA,SAAAZ,KAAA,CAAAa,IAAA;YACAC,QAAA,OAAAV,aAAA;YACAW,QAAA,OAAAV;UACA;UACA,IAAAO,QAAA,CAAAV,IAAA,CAAAc,OAAA;YACAC,KAAA;UACA;YACAA,KAAA,CAAAL,QAAA,CAAAV,IAAA,CAAAgB,OAAA;UACA;QACA,SAAAC,KAAA;UACAF,KAAA;QACA;MACA;QACAA,KAAA;MACA;IACA;IAEA;IACA,MAAAG,eAAA;MACA;MACA,IACA,KAAAd,gBAAA,IACA,KAAAC,aAAA,IACA,KAAAC,gBAAA,IACA,KAAAC,uBAAA,EACA;QACA;QACA,SAAAD,gBAAA,UAAAC,uBAAA;UACAQ,KAAA;QACA;UACA;YACA,MAAAL,QAAA,SAAAZ,KAAA,CAAAa,IAAA;cACAC,QAAA,OAAAR,gBAAA;cACAe,KAAA,OAAAd,aAAA;cACAQ,QAAA,OAAAP;YACA;YACA,IAAAI,QAAA,CAAAV,IAAA,CAAAc,OAAA;cACAC,KAAA;YACA;cACAA,KAAA,CAAAL,QAAA,CAAAV,IAAA,CAAAgB,OAAA;YACA;UACA,SAAAC,KAAA;YACAF,KAAA;UACA;QACA;MACA;QACAA,KAAA;MACA;IACA;IAEAK,WAAA;MACAtB,KAAA,CAAAuB,GAAA;IACA;EACA;AACA;AACA;AACA,eAAAtB,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}